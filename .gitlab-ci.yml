stages:
  - install
  - lint
  - build
  - test
  - deploy

# pnpm template: https://github.com/pnpm/pnpm/issues/1174#issuecomment-996719439
default:
  image: node:20.10-alpine
  before_script:
    - corepack enable
    - corepack prepare pnpm@latest-8 --activate
    - pnpm config set store-dir .pnpm-store
    - export PNPM_HOME="/usr/local/bin"
    - export PATH="$PNPM_HOME:$PATH"
  cache: &global_cache
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      # Next.js: https://nextjs.org/docs/pages/building-your-application/deploying/ci-build-caching#gitlab-ci
      - .next/cache/
      - node_modules
      # pnpm: https://pnpm.io/continuous-integration#gitlab-ci
      - .pnpm-store
    policy: pull

.updates-cache:
  cache:
    <<: *global_cache
    policy: pull-push

install:
  extends:
    .updates-cache
  stage: install
  script:
    - pnpm install

build:
  extends:
    .updates-cache
  stage: build
  script:
    - pnpm run build

lint:
  stage: lint
  script:
    - pnpm run lint:check
    - pnpm run format:check

end-to-end-tests:
  image: mcr.microsoft.com/playwright:v1.44.1-jammy
  stage: test
  script:
    - pnpm run test

# https://vercel.com/guides/how-can-i-use-gitlab-pipelines-with-vercel#configuring-gitlab-ci/cd-for-vercel
deploy_preview:
  stage: deploy
  needs: [ build ]
  when:
    manual
  except:
    - main
  script:
    - pnpm add --global vercel
    - vercel pull --yes --environment=preview --token=$VERCEL_TOKEN
    - vercel build --token=$VERCEL_TOKEN
    - vercel deploy --prebuilt  --token=$VERCEL_TOKEN

deploy_production:
  stage: deploy
  needs: [ build ]
  when:
    manual
  only:
    - main
  script:
    - pnpm add --global vercel
    - vercel pull --yes --environment=production --token=$VERCEL_TOKEN
    - vercel build --prod --token=$VERCEL_TOKEN
    - vercel deploy --prebuilt --prod --token=$VERCEL_TOKEN